// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CloudCoin_SafeScan;
using Foundation;
using GalaSoft.MvvmLight.Threading;
using UIKit;

namespace CloudCoinIOS
{
	public partial class ImportViewController : BaseFormSheet
	{
		private List<string> urlList;
		private const string confirmMsg = "Would you like to change ownership and import money in Safe?\n" +
					             "Choosing 'No' will simply scan coins without changing passwords.";

		public ImportViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad();

			InitializeProperties();

			InitializeMethods();
		}

		private void InitializeProperties()
		{
			var appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
			urlList = appDelegate.UrlList;

			lblImportedFiles.Text = string.Format("You have {0} files in your import directory", urlList.Count);

			if (urlList.Count == 0)
				btnImport.Enabled = false;
			else
				btnImport.Enabled = true;

			btnFinished.Enabled = false;
			
		}

		private void InitializeMethods()
		{
			btnImport.TouchUpInside += async (sender, e) =>
			{
				var coinFile = ApplicationLogic.ScanSelected(urlList);
				if (coinFile != null && coinFile.IsValidFile)
				{
					int result = await ShowAlert("Confirmation", confirmMsg, new string[] { "Yes", "No" });
					if (result == 0)
					{
						btnCancel.Hidden = true;
						btnImport.Hidden = true;
						RAIDA.Instance.Detect(coinFile.Coins, true);

						//will implement the Safe source.

					}
					else
					{
						btnCancel.Hidden = true;
						btnImport.Hidden = true;
						RAIDA.Instance.Detect(coinFile.Coins, false);
					}
				}
				else
				{
					await ShowAlert("Message", "There is no CloudCoins!", new string[] { "Ok"});
					RemoveAnimate();
				}
			};

			btnCancel.TouchUpInside += (sender, e) => 
			{ 
                RemoveAnimate();
			};

			btnFinished.TouchUpInside += (sender, e) =>
			{
				RemoveAnimate();
			};

			RAIDA.Instance.StackScanCompleted += StackScanCompleted;
		}

		private void StackScanCompleted(object o, StackScanCompletedEventArgs e)
		{
			InvokeOnMainThread(() =>
			{
				btnFinished.SetTitle("Finished", UIControlState.Normal);
				btnFinished.Enabled = true;
			});
		}
	}
}
